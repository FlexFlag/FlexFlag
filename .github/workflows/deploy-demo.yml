name: Deploy Demo

on:
  push:
    branches: [ main ]
    paths: 
      - 'cmd/**'
      - 'internal/**' 
      - 'pkg/**'
      - 'ui/**'
      - 'docker/**'
      - 'Dockerfile.demo'
      - 'docker-compose.demo.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: flexflag/flexflag-demo

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.demo
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to production
      if: github.ref == 'refs/heads/main'
      run: |
        echo "ðŸš€ Demo deployment completed!"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        
        # Here you would add your actual deployment commands
        # For example, updating a Kubernetes deployment, Railway, etc.
        
        # Example for Railway:
        # railway login --token ${{ secrets.RAILWAY_TOKEN }}
        # railway up --service flexflag-demo
        
        # Example for VPS deployment:
        # ssh user@your-server "docker-compose -f docker-compose.demo.yml pull && docker-compose -f docker-compose.demo.yml up -d"

    - name: Comment PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'ðŸš€ Demo build completed! Docker image: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}`'
          })